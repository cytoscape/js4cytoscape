const defaultBaseUrl="http://127.0.0.1:1234/v1";async function cyrestGET(t="",e="",n=defaultBaseUrl){let o=n.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const c=await fetch(o,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});return await c.json()}async function cyrestDELETE(t="",e="",n=defaultBaseUrl){let o=n.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const c=await fetch(o,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});return await c.text()}async function cyrestPOST(t="",e="",n="",o=defaultBaseUrl){let c=o.concat("/",t);if(""!=e){const t=e;c=c.concat("?",t)}const a=JSON.stringify(n),s=await fetch(c,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:a});return await s.json()}async function cyrestPUT(t="",e="",n="",o=defaultBaseUrl){let c=o.concat("/",t);if(""!=e){const t=e;c=c.concat("?",t)}const a=JSON.stringify(n),s=await fetch(c,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:a});return await s.json()}async function deleteAllNetworks(t=defaultBaseUrl){cyrestDELETE("networks",t=t);console.log("All networks are deleted.")}async function cytoscapeVersionInfo(t=defaultBaseUrl){let e=cyrestGET("version",t=t);e.then(t=>{console.log(t.apiVersion)}),e.then(t=>{console.log(t.cytoscapeVersion)})}async function cytoscapeMemoryStatus(t=defaultBaseUrl){cyrestGET("","",t=t).then(t=>{console.log(t.memoryStatus)})}