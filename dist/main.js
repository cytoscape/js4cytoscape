async function cyrestGET(e="",t="",n=defaultBaseUrl){let a=n.concat("/",e);if(""!=t){const e=t;a=a.concat("?",e)}const o=await fetch(a,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});return await o.json()}async function cyrestDELETE(e="",t="",n=defaultBaseUrl){let a=n.concat("/",e);if(""!=t){const e=t;a=a.concat("?",e)}const o=await fetch(a,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});return await o.text()}async function cyrestPOST(e="",t="",n={},a=defaultBaseUrl){let o=a.concat("/",e);if(""!=t){const e=t;o=o.concat("?",e)}const c=JSON.stringify(n),s=await fetch(o,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});return await s.json()}async function cyrestPUT(e="",t="",n={},a=defaultBaseUrl){let o=a.concat("/",e);if(""!=t){const e=t;o=o.concat("?",e)}const c=JSON.stringify(n),s=await fetch(o,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});return await s.json()}async function commandsGET(e,t=defaultBaseUrl){const n=command2getQuery(e,t),a=await fetch(n,{method:"GET",headers:{Accept:"text/plain","Content-Type":"text/plain"}});return await a.text()}async function commandsRun(e,t=defaultBaseUrl){commandsGET(e,t=t)}async function commandsPOST(e,t=defaultBaseUrl){const n=command2PostQueryUrl(e,t);let a=command2PostQueryBody(e);a=JSON.stringify(a);const o=await fetch(n,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:a});return await o.text()}function command2getQuery(e,t=defaultBaseUrl){let n=e.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX"),a=n[0].replace(" ","/"),o=t.concat("/commands/"),c=encodeURI(o.concat(a)),s=n.slice(1).join(" "),l="",i=[],r=[];if(void 0!==s&&0!=s.length){const e=/[A-Za-z0-9_-]+=/g;i=(i=(s=s.replace(/['"]+/g,"")).match(e)).map(function(e){return e.replace(/=/g,"")});const t=/\ *[A-Za-z0-9_-]+=/g;r=s.split(t).slice(1),l=i[0]+"="+encodeURI(r[0]);for(var p=1;p<i.length;p++){l=l+"&"+(i[p]+"="+encodeURI(r[p]))}return c+"?"+l}return c}function command2PostQueryUrl(e,t=defaultBaseUrl){let n=e.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX")[0].replace(" ","/"),a=t.concat("/commands/");return encodeURI(a.concat(n))}function command2PostQueryBody(e){let t=e.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX").slice(1).join(" "),n={},a=[],o=[];if(void 0!==t&&0!=t.length){const e=/[A-Za-z0-9_-]+=/g;a=(a=(t=t.replace(/['"]+/g,"")).match(e)).map(function(e){return e.replace(/=/g,"")});const c=/\ *[A-Za-z0-9_-]+=/g;return o=t.split(c).slice(1),a.forEach((e,t)=>n[e]=o[t]),n}return n={atLeastOneArg:"required"}}async function deleteAllNetworks(e=defaultBaseUrl){cyrestDELETE("networks",e=e);console.log("All networks are deleted.")}async function getNetworkSuid(e="current",t=defaultBaseUrl){return commandsPOST('network get attribute network="'+e+'" namespace="default" columnList="SUID"',t=t).then(e=>JSON.parse(e).data[0].SUID)}async function cytoscapeVersionInfo(e=defaultBaseUrl){let t=cyrestGET("version",e=e);t.then(e=>{console.log("apiVersion: "+e.apiVersion)}),t.then(e=>{console.log("cytoscapeVersion: "+e.cytoscapeVersion)})}async function cytoscapeMemoryStatus(e=defaultBaseUrl){cyrestGET("","",e=e).then(e=>{console.log(e.memoryStatus)})}async function importNetworkFromNDEX(e=e,t,n,a){const o={serverUrl:e,uuid:t,username:n,password:a},c=CYREST_BASE_URL+"/cyndex2/v1/networks";console.log("Calling CyREST POST:",c);const s=await fetch(c,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(o)}),l=await s.json();console.log("Response JSON: "+JSON.stringify(l));const i=l.data.suid;return console.log("network SUID: "+i),i}async function exportNetworkToNDEx(e=e,t,n,a,o="current",c=null){const s={serverUrl:e,username:t,password:n,metadata:c,isPublic:a};let l=await getNetworkSuid(o=o);console.log(l);const i=CYREST_BASE_URL+"/cyndex2/v1/networks/"+l;console.log("Calling CyREST POST:",i);const r=await fetch(i,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(s)}),p=await r.json();console.log("Response JSON: "+JSON.stringify(p));const d=p.data.suid;return console.log("network SUID: "+d),d}const defaultBaseUrl="http://127.0.0.1:1234/v1",serverUrl="http://ndexbio.org/v2",CYREST_BASE_URL="http://127.0.0.1:1234";let ndex;function displayCX(e,t){const n=document.getElementById(t),a=new cytoscapeCx2js.CyNetworkUtils,o=a.rawCXtoNiceCX(e),c=new cytoscapeCx2js.CxToJs(a);let s={};const l=c.cyElementsFromNiceCX(o,s),i=c.cyStyleFromNiceCX(o,s),r=c.cyBackgroundColorFromNiceCX(o),p=c.getDefaultLayout(),d=c.cyZoomFromNiceCX(o),u=c.cyPanFromNiceCX(o);n.style.backgroundColor=r,cytoscape({container:n,style:i,elements:l,layout:p,zoom:d,pan:u}).fit()}function initNdexClient(){ndex=new ndexClient.NDEx(serverUrl)}function displayNDExCX(e,t){initNdexClient(),ndex.getRawNetwork(e).then(e=>{displayCX(e,t)})}function displayLocalCX(e,t){initNdexClient(),fetch(e).then(function(e){return e.json()}).then(e=>{displayCX(e,t)})}async function getAvailableApps(e=defaultBaseUrl){commandsGET("apps list available",e=e).then(e=>{console.log("Available apps: "+e)})}async function getInstalledApps(e=defaultBaseUrl){commandsGET("apps list installed",e=e).then(e=>{console.log("Installed apps: "+e)})}async function getDisabledApps(e=defaultBaseUrl){commandsGET("apps list disabled",e=e).then(e=>{console.log("Disabled apps: "+e)})}async function getAppUpdates(e=defaultBaseUrl){commandsGET("apps list updates",e=e)}async function openAppStore(e,t=defaultBaseUrl){commandsGET("apps open appstore app='"+e+"'",t=t)}async function getFilterList(e=defaultBaseUrl){commandsPOST("filter list",e=e).then(e=>{console.log("Filter list: "+JSON.stringify(JSON.parse(e).data))})}async function analyzeNetwork(e=!1,t=defaultBaseUrl){commandsPOST("analyzer analyze directed="+e,t=t).then(e=>{console.log("Analyze network: "+JSON.stringify(JSON.parse(e).data))})}