!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports["@js4Cytoscape/cxVizConverter"]=n():e["@js4Cytoscape/cxVizConverter"]=n()}(self,(function(){return e={185:function(e,n,r){var o=r(497),t=r(560),i=r(528),a=r(218);function c(e){var n=e[0][o.CX_VERSION];if(2!==a.getCxMajorVersion(n))throw"Incompatible CX version: "+n}var u=[t,i];function s(e,n){var r=void 0;if(n.forEach((function(n){if(n.converter.targetFormat==e){if(void 0!==r)throw"converters contain multiple entries for target format: "+e;r=n}})),void 0===r)throw"no converter available for target format: "+e;return r}function f(e,n){return s(e,n).converter.emptyNetwork}e.exports={convert:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;if(0==e.length)return f(n,r);c(e);var o=s(n,r);return o.converter.convert(e)}}},497:function(e){e.exports=Object.freeze({CX_VERSION:"CXVersion",NODE:"node",EDGE:"edge",NETWORK:"network",NODES:"nodes",EDGES:"edges",ID:"id",X:"x",Y:"y",Z:"z",V:"v",AT:"at",N:"n",E:"e",VISUAL_PROPERTIES:"visualProperties",DEFAULT:"default",STYLE:"style",PO:"po"})},218:function(e){function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e){var n=e.split(".").map((function(e){return parseInt(e,10)}));if(2!==n.length&&3!=n.length)throw"Incompatible version format: "+e;return n.forEach((function(n){if(isNaN(n))throw"Non-integer value in version string: "+e})),n}function o(e,n){Object.keys(n).forEach((function(r){var o=n[r];o.d&&e.set(r,o.d)}))}function t(e,n){Object.keys(n).forEach((function(r){var o=n[r];o.a&&e.set(o.a,r)}))}function i(e,n){Object.keys(n).forEach((function(r){var o=n[r];o.v&&e.set(r,o.v)}))}e.exports={getCxVersion:r,getCxMajorVersion:function(e){return e?r(e)[0]:1},processAttributeDeclarations:function(e,n,r,a,c,u,s){e.forEach((function(e){e.nodes&&(t(n,e.nodes),o(r,e.nodes),i(a,e.nodes)),e.edges&&(t(c,e.edges),o(u,e.edges),i(s,e.edges))}))},updateAttributeTypeMap:o,updateAttributeNameMap:t,updateAttributeDefaultValueMap:i,updateInferredTypes:function(e,r,o){o&&Object.keys(o).forEach((function(t){if(!e.has(t)){var i=n(o[t]),a=r.has(t)?r.get(t):t;e.set(a,i)}}))},getExpandedAttributes:function(e,n,r){var o={};return e&&Object.keys(e).forEach((function(r){var t=n.has(r)?n.get(r):r;o[t]=e[r]})),r.forEach((function(e,n){o[n]||(o[n]=e)})),o}}},528:function(e,n,r){r(497);var o=r(969),t=r(218);function i(e,n){var r=new Map;return r.set(e,n),r}var a={node:{NODE_SHAPE:function(e){return i(o.shape,e)},NODE_WIDTH:function(e){return i(o.width,e)},NODE_HEIGHT:function(e){return i(o.height,e)},NODE_BACKGROUND_COLOR:function(e){return i(o.background_color,e)},NODE_BACKGROUND_OPACITY:function(e){return i(o.background_opacity,e)},NODE_LABEL:function(e){return i(o.label,e)},NODE_LABEL_COLOR:function(e){return i(o.label_color,e)},NODE_LABEL_OPACITY:function(e){return i(o.label_opacity,e)},NODE_LABEL_FONT_SIZE:function(e){return i(o.label_font_size,e)}},edge:{EDGE_WIDTH:function(e){return i(o.width,e)},EDGE_OPACITY:function(e){return i(o.opacity,e)},EDGE_LABEL:function(e){return i(o.label,e)},EDGE_LINE_COLOR:function(e){return i(o.line_color,e)},EDGE_LABEL_OPACITY:function(e){return i(o.label_opacity,e)},EDGE_LABEL_FONT_SIZE:function(e){return i(o.label_font_size,e)}}};function c(e,n){var r={};return r[e]="data("+n+")",r}var u={node:{NODE_SHAPE:function(e){return c(o.shape,e)},NODE_WIDTH:function(e){return c(o.width,e)},NODE_HEIGHT:function(e){return c(o.height,e)},NODE_BACKGROUND_COLOR:function(e){return c(o.background_color,e)},NODE_BACKGROUND_OPACITY:function(e){return c(o.background_opacity,e)},NODE_LABEL:function(e){return c(o.label,e)},NODE_LABEL_COLOR:function(e){return c(o.label_color,e)},NODE_LABEL_OPACITY:function(e){return c(o.label_opacity,e)},NODE_LABEL_FONT_SIZE:function(e){return c(o.label_font_size,e)}},edge:{EDGE_WIDTH:function(e){return c(o.width,e)},EDGE_OPACITY:function(e){return c(o.opacity,e)},EDGE_LINE_COLOR:function(e){return c(o.line_color,e)},EDGE_LABEL:function(e){return c(o.label,e)},EDGE_LABEL_COLOR:function(e){return c(o.label_color,e)},EDGE_LABEL_OPACITY:function(e){return c(o.label_opacity,e)},EDGE_LABEL_FONT_SIZE:function(e){return c(o.label_font_size,e)}}};function s(e,n,r,o,t,i){var a={};return null!=r&&void 0!==o?a[e]="mapData("+n+", "+r+", "+o+", "+t+", "+i+")":void 0===r?a[e]=i:null==o&&(a[e]=t),a}var f={node:{NODE_SHAPE:function(e,n,r,t,i){return s(o.shape,e,n,r,t,i)},NODE_WIDTH:function(e,n,r,t,i){return s(o.width,e,n,r,t,i)},NODE_HEIGHT:function(e,n,r,t,i){return s(o.height,e,n,r,t,i)},NODE_BACKGROUND_COLOR:function(e,n,r,t,i){return s(o.background_color,e,n,r,t,i)},NODE_BACKGROUND_OPACITY:function(e,n,r,t,i){return s(o.background_opacity,e,n,r,t,i)},NODE_LABEL:function(e,n,r,t,i){return s(o.label,e,n,r,t,i)},NODE_LABEL_COLOR:function(e,n,r,t,i){return s(o.label_color,e,n,r,t,i)},NODE_LABEL_OPACITY:function(e,n,r,t,i){return s(o.label_opacity,e,n,r,t,i)},NODE_LABEL_FONT_SIZE:function(e,n,r,t,i){return s(o.label_font_size,e,n,r,t,i)}},edge:{EDGE_WIDTH:function(e,n,r,t,i){return s(o.width,e,n,r,t,i)},EDGE_OPACITY:function(e,n,r,t,i){return s(o.opacity,e,n,r,t,i)},EDGE_LINE_COLOR:function(e,n,r,t,i){return s(o.line_color,e,n,r,t,i)},EDGE_LABEL:function(e,n,r,t,i){return s(o.label,e,n,r,t,i)},EDGE_LABEL_COLOR:function(e,n,r,t,i){return s(o.label_color,e,n,r,t,i)},EDGE_LABEL_OPACITY:function(e,n,r,t,i){return s(o.label_opacity,e,n,r,t,i)},EDGE_LABEL_FONT_SIZE:function(e,n,r,t,i){return s(o.label_font_size,e,n,r,t,i)}}};function p(e,n){var r={};return Object.keys(e).forEach((function(o){var t=e[o];a[n][o]&&a[n][o](t).forEach((function(e,n){r[n]=e}))})),r}function l(e,n){return{selector:e,style:n}}function d(e,n,r,o){var t=[],i=n.attribute;return n.map.forEach((function(n){var o=function(e,n,r,o,t,i){return e+(void 0!==r?"["+n+" "+(t?">=":">")+" "+r+"]":"")+(void 0!==o?"["+n+" "+(i?"<=":"<")+" "+o+"]":"")}(r,i,n.min,n.max,n.includeMin,n.includeMax),a=function(e,n,r,o,t,i,a){return f[e][n]?f[e][n](r,o,t,i,a):{}}(r,e,i,n.min,n.max,n.minVPValue,n.maxVPValue);t.push(l(o,a))})),t}function E(e,n){var r=n.id,o={};Object.keys(n.v).forEach((function(r){var t=n.v[r];a[e][r]&&a[e][r](t).forEach((function(e,n){o[n]=e}))}));var t=function(e,n){return n+"#"+e}(r,e);return l(t,o)}function v(e,n,r){var o=[];return e&&Object.keys(e).forEach((function(t){var i=e[t];switch(i.type){case"CONTINUOUS":d(t,i.definition,n).forEach((function(e){o.push(e)}));break;case"PASSTHROUGH":var c=function(e,n,r){return u[r][e]?l(r,u[r][e](n.attribute)):null}(t,i.definition,n);c&&o.push(c);break;case"DISCRETE":var s=function(e,n,r,o){var t=[],i=n.map,c=n.attribute,u=o.get(c);return i.forEach((function(n){var o=function(e,n,r,o){return"string"==r?e+"["+n+" = '"+o+"']":"boolean"==r?"true"==o?e+"[?"+n+"]":e+"["+n+"][!"+n+"]":e+"["+n+" = "+o+"]"}(r,c,u,n.v);if(a[r][e]){var i=a[r][e](n.vp),s={};i.forEach((function(e,n){s[n]=e})),t.push(l(o,s))}})),t}(t,i.definition,n,r);s.forEach((function(e){o.push(e)}))}})),o}var _={targetFormat:"cytoscapeJS",emptyNetwork:{style:[],elements:{},layout:{},"background-color":null},convert:function(e){var n={style:[],elements:{},layout:{},"background-color":null},r=void 0,o=[],i=[],a=new Map,c=new Map,u=new Map,s=new Map,f=new Map,d=new Map;e.forEach((function(e){if(e.attributeDeclarations){var n=e.attributeDeclarations;t.processAttributeDeclarations(n,u,a,f,s,c,d)}else e.nodes?e.nodes.forEach((function(e){t.updateInferredTypes(a,u,e.v)})):e.edges?e.edges.forEach((function(e){t.updateInferredTypes(c,s,e.v)})):e.visualProperties?r=e.visualProperties:e.nodeBypasses?e.nodeBypasses.forEach((function(e){o.push(e)})):e.edgeBypasses&&e.edgeBypasses.forEach((function(e){i.push(e)}))})),a.forEach((function(e,n){})),c.forEach((function(e,n){})),n.elements.nodes=[],n.elements.edges=[],e.forEach((function(e){e.nodes?e.nodes.forEach((function(e){var r={};r.data=t.getExpandedAttributes(e.v,u,f),r.data.id=e.id.toString(),r.position={x:e.x,y:e.y},n.elements.nodes.push(r)})):e.edges&&e.edges.forEach((function(e){var r={};r.data=t.getExpandedAttributes(e.v,s,d),r.data.id=e.id.toString(),r.data.source=e.s,r.data.target=e.t,n.elements.edges.push(r)}))}));var _=function(e,n,r,o,t){var i={style:[],"background-color":void 0},a=void 0,c=void 0,u=void 0,s=void 0,f=void 0,d=[];return e.forEach((function(e){var n=e.default;a=p(n.node,"node"),c=p(n.edge,"edge"),u=n.network["background-color"];var r=e.nodeMapping;s=v(r,"node",o);var i=e.edgeMapping;f=v(i,"edge",t)})),n.forEach((function(e){d.push(E("node",e))})),r.forEach((function(e){d.push(E("edge",e))})),i.style.push(l("node",a)),i.style.push(l("edge",c)),i.style.push.apply(i.style,s),i.style.push.apply(i.style,f),i.style.push.apply(i.style,d),i["background-color"]=u,i}(r,o,i,a,c);return n.style=_.style,n["background-color"]=_["background-color"],n}};e.exports={converter:_}},969:function(e){e.exports=Object.freeze({shape:"shape",width:"width",height:"height",background_color:"background-color",background_opacity:"background-opacity",label:"label",label_color:"color",label_font_size:"font-size",label_opacity:"text-opacity",opacity:"opacity",line_color:"line-color"})},759:function(e,n,r){"use strict";var o=r(185);e.exports.convert=function(e,n){return o.convert(e,n)}},560:function(e,n,r){var o=r(497),t=r(340),i=r(218);function a(e,n){var r={};return r[e]=n,r}function c(e){if(void 0===e)return e;var n=0,r=0,o=0;return 4==e.length?(n="0x"+e[1]+e[1],r="0x"+e[2]+e[2],o="0x"+e[3]+e[3]):7==e.length&&(n="0x"+e[1]+e[2],r="0x"+e[3]+e[4],o="0x"+e[5]+e[6]),[parseInt(n),parseInt(r),parseInt(o)]}function u(e){return b(Math.round(255*e),0,255)}var s={node:{NODE_WIDTH:function(e){return a(t.preprocessNodeWidth,e)},NODE_HEIGHT:function(e){return a(t.preprocessNodeHeight,e)},NODE_BACKGROUND_COLOR:function(e){return a(t.preprocessColor,c(e))},NODE_BACKGROUND_OPACITY:function(e){return a(t.preprocessAlpha,u(e))},NODE_LABEL:function(e){return a(t.label,e)},NODE_LABEL_COLOR:function(e){return a(t.preprocessLabelColor,c(e))},NODE_LABEL_OPACITY:function(e){return a(t.preprocessLabelAlpha,u(e))},NODE_LABEL_FONT_SIZE:function(e){return a(t.labelFontSize,e)}},edge:{EDGE_WIDTH:function(e){return a(t.width,e)},EDGE_OPACITY:function(e){return a(t.preprocessAlpha,u(e))},EDGE_LINE_COLOR:function(e){return a(t.preprocessColor,c(e))},EDGE_LABEL:function(e){return a(t.label,e)},EDGE_LABEL_COLOR:function(e){return a(t.preprocessLabelColor,c(e))},EDGE_LABEL_OPACITY:function(e){return a(t.preprocessLabelAlpha,u(e))},EDGE_LABEL_FONT_SIZE:function(e){return a(t.labelFontSize,e)}}};function f(e){var n={node:{},edge:{}};if(e.node){var r=p("node",e.node);Object.assign(n.node,r)}if(e.edge){var o=p("edge",e.edge);Object.assign(n.edge,o)}return n}function p(e,n){var r={};return Object.keys(n).forEach((function(o){var t=n[o];if(s[e][o]){var i=s[e][o](t);Object.keys(i).forEach((function(e){r[e]=i[e]}))}})),r}function l(e,n){return null!=e?null!=n?[e[0],e[1],e[2],n]:[e[0],e[1],e[2]]:void 0}function d(e,n){return Math.max(e,n)}function E(e){var n=void 0,r=void 0,o=void 0,i=void 0,a=void 0,c=void 0,u={id:e.id,position:e.position};Object.keys(e).forEach((function(s){s===t.preprocessNodeWidth?n=e.preprocessNodeWidth:s===t.preprocessNodeHeight?r=e.preprocessNodeHeight:s===t.preprocessColor?o=e.preprocessColor:s===t.preprocessAlpha?i=e.preprocessAlpha:s===t.preprocessLabelColor?a=e.preprocessLabelColor:s===t.preprocessLabelAlpha?c=e.preprocessLabelAlpha:u[s]=e[s]}));var s=l(o,i);s&&(u[t.color]=s);var f=l(a,c);return f&&(u[t.labelColor]=f),d(n,r)&&(u[t.size]=d(n,r)),u}function v(e){var n=void 0,r=void 0,o=void 0,i=void 0,a={id:e.id,s:e.s,t:e.t};Object.keys(e).forEach((function(c){c===t.preprocessColor?n=e.preprocessColor:c===t.preprocessAlpha?r=e.preprocessAlpha:c===t.preprocessLabelColor?o=e.preprocessLabelColor:c===t.preprocessLabelAlpha?i=e.preprocessLabelAlpha:a[c]=e[c]}));var c=l(n,r);c&&(a[t.color]=c);var u=l(o,i);return u&&(a[t.labelColor]=u),a}function _(e){var n={};return Object.keys(e).forEach((function(r){var o=e[r],t=n[o.definition.attribute]?n[o.definition.attribute]:[];t.push({type:o.type,vp:r,definition:o.definition}),n[o.definition.attribute]=t})),n}function O(e,n,r){return(e-n)/(r-n)}function h(e,n,r){return void 0!==e&&void 0!==n?e+(n-e)*r:void 0===e?n:void 0===n?e:void 0}function b(e,n,r){return Math.min(Math.max(e,n),r)}function g(e,n,r,o,t){return h(o,t,O(e,n,r))}function L(e,n,r,o,t){var i=c(o),a=c(t),u=O(e,n,r);return[b(Math.round(h(void 0===i?void 0:i[0],void 0===a?void 0:a[0],u)),0,255),b(Math.round(h(void 0===i?void 0:i[1],void 0===a?void 0:a[1],u)),0,255),b(Math.round(h(void 0===i?void 0:i[2],void 0===a?void 0:a[2],u)),0,255)]}function D(e,n,r,o,t){return u(h(o,t,O(e,n,r)))}var A={node:{NODE_WIDTH:function(e,n,r,o,i){return a(t.preprocessNodeWidth,g(e,n,r,o,i))},NODE_HEIGHT:function(e,n,r,o,i){return a(t.preprocessNodeHeight,g(e,n,r,o,i))},NODE_BACKGROUND_COLOR:function(e,n,r,o,i){return a(t.preprocessColor,L(e,n,r,o,i))},NODE_BACKGROUND_OPACITY:function(e,n,r,o,i){return a(t.preprocessAlpha,D(e,n,r,o,i))},NODE_LABEL_COLOR:function(e,n,r,o,i){return a(t.preprocessLabelColor,L(e,n,r,o,i))},NODE_LABEL_OPACITY:function(e,n,r,o,i){return a(t.preprocessLabelAlpha,D(e,n,r,o,i))},NODE_LABEL_FONT_SIZE:function(e,n,r,o,i){return a(t.labelFontSize,g(e,n,r,o,i))}},edge:{EDGE_WIDTH:function(e,n,r,o,i){return a(t.width,g(e,n,r,o,i))},EDGE_OPACITY:function(e,n,r,o,i){return a(t.preprocessAlpha,D(e,n,r,o,i))},EDGE_LINE_COLOR:function(e,n,r,o,i){return a(t.preprocessColor,L(e,n,r,o,i))},EDGE_LABEL_COLOR:function(e,n,r,o,i){return a(t.preprocessLabelColor,L(e,n,r,o,i))},EDGE_LABEL_OPACITY:function(e,n,r,o,i){return a(t.preprocessLabelAlpha,D(e,n,r,o,i))},EDGE_LABEL_FONT_SIZE:function(e,n,r,o,i){return a(t.labelFontSize,g(e,n,r,o,i))}}};function y(e,n,r,o,t){return(void 0===n||(o?n<=e:n<e))&&(null==r||(t?r>=e:r>e))}function N(e,n,r){var o={};return Object.keys(r).forEach((function(t){var i=r[t];e[n][t]&&e[n][t].forEach((function(e){if("DISCRETE"===e.type)e.definition.map&&e.definition.map.forEach((function(r){if(r.v==i&&s[n][e.vp]){var t=s[n][e.vp](r.vp);Object.assign(o,t)}}));else if("PASSTHROUGH"===e.type){if(s[n][e.vp]){var r=s[n][e.vp](i);Object.assign(o,r)}}else"CONTINUOUS"===e.type&&e.definition.map.forEach((function(r){if(y(i,r.min,r.max,r.includeMin,r.includeMax)&&A[n][e.vp]){var t=A[n][e.vp](i,r.min,r.max,r.minVPValue,r.maxVPValue);Object.assign(o,t)}}))}))})),o}var C={targetFormat:"lnv",emptyNetwork:{nodeViews:[],edgeViews:[]},convert:function(e){return function(e){var n=void 0,r=[],a=[],c=new Map,u=new Map,s=new Map,l=new Map,d=new Map,O=new Map,h=void 0,b={node:{},edge:{}},g={node:{},edge:{}};e.forEach((function(e){if(e.attributeDeclarations){var o=e.attributeDeclarations;i.processAttributeDeclarations(o,s,c,d,l,u,O)}else e.nodes?e.nodes.forEach((function(e){i.updateInferredTypes(c,s,e.v)})):e.edges?e.edges.forEach((function(e){i.updateInferredTypes(u,l,e.v)})):e.visualProperties?n=e.visualProperties:e.nodeBypasses?e.nodeBypasses.forEach((function(e){r.push(e)})):e.edgeBypasses&&e.edgeBypasses.forEach((function(e){a.push(e)}))}));var L={},D=[],A=[];return n&&n.forEach((function(e){var n=e.default;h=f(n),b.node=e.nodeMapping?_(e.nodeMapping):{},b.edge=e.edgeMapping?_(e.edgeMapping):{}})),r&&r.forEach((function(e){var n=e[o.ID].toString(),r=p("node",e.v);g.node[n]||(g.node[n]={}),Object.assign(g.node[n],r)})),a&&a.forEach((function(e){var n=e[o.ID].toString(),r=p("edge",e.v);g.edge[n]||(g.edge[n]={}),Object.assign(g.edge[n],r)})),e.forEach((function(e){e.nodes?e.nodes.forEach((function(e){var n=e[o.ID].toString(),r={id:n,position:e.z?[e.x,e.y,e.z]:[e.x,e.y]};if(h){var t=h.node;Object.assign(r,t)}var a=i.getExpandedAttributes(e.v,s,d),c=N(b,"node",a);Object.assign(r,c),g.node[n]&&Object.assign(r,g.node[n]);var u=E(r);D.push(u)})):e.edges&&e.edges.forEach((function(e){var n=e[o.ID].toString(),r={id:n,s:e.s.toString(),t:e.t.toString()};if(h){var t=h.edge;Object.assign(r,t)}var a=i.getExpandedAttributes(e.v,l,O),c=N(b,"edge",a);Object.assign(r,c),g.edge[n]&&Object.assign(r,g.edge[n]);var u=v(r);A.push(u)}))})),L[t.nodeViews]=D,L[t.edgeViews]=A,L}(e)}};e.exports={simpleDefaultPropertyConvert:a,continuousNumberPropertyConvert:g,continuousAlphaPropertyConvert:D,continuousColorPropertyConvert:L,processNodeView:E,processEdgeView:v,getDefaultValues:f,getAttributeRatio:O,isInRange:y,converter:C}},340:function(e){e.exports=Object.freeze({nodeViews:"nodeViews",edgeViews:"edgeViews",id:"id",position:"position",s:"s",t:"t",label:"label",labelColor:"labelColor",labelFontSize:"labelFontSize",color:"color",size:"size",width:"width",preprocessColor:"preprocessColor",preprocessAlpha:"preprocessAlpha",preprocessLabelColor:"preprocessLabelColor",preprocessLabelAlpha:"preprocessLabelAlpha",preprocessNodeWidth:"preprocessNodeWidth",preprocessNodeHeight:"preprocessNodeHeight"})}},n={},r=function r(o){var t=n[o];if(void 0!==t)return t.exports;var i=n[o]={exports:{}};return e[o](i,i.exports,r),i.exports}(759),r;var e,n,r}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,