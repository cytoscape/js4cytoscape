!function(t,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.cyannotationCx2js=o():t.cyannotationCx2js=o()}(window,function(){return function(t){var o={};function e(a){if(o[a])return o[a].exports;var n=o[a]={i:a,l:!1,exports:{}};return t[a].call(n.exports,n,n.exports,e),n.l=!0,n.exports}return e.m=t,e.c=o,e.d=function(t,o,a){e.o(t,o)||Object.defineProperty(t,o,{enumerable:!0,get:a})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,o){if(1&o&&(t=e(t)),8&o)return t;if(4&o&&"object"==typeof t&&t&&t.__esModule)return t;var a=Object.create(null);if(e.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:t}),2&o&&"string"!=typeof t)for(var n in t)e.d(a,n,function(o){return t[o]}.bind(null,n));return a},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},e.p="",e(e.s=0)}([function(t,o,e){"use strict";var a=e(1).CxToCyCanvas;t.exports={CxToCyCanvas:a}},function(t,o,e){"use strict";var a=function(){function t(t,o){for(var e=0;e<o.length;e++){var a=o[e];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(o,e,a){return e&&t(o.prototype,e),a&&t(o,a),o}}();var n=function(){function t(o){!function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t);var e=this;e.cx2js=o,this._findIntersection=function(t,o,e,a){var n=(a.y-e.y)*(o.x-t.x)-(a.x-e.x)*(o.y-t.y),r=((a.x-e.x)*(t.y-e.y)-(a.y-e.y)*(t.x-e.x))/n;return{x:this._epsilon(t.x+r*(o.x-t.x)),y:this._epsilon(t.y+r*(o.y-t.y))}},this._epsilon=function(t){return Math.abs(t)<1e-10?0:t},this._circleX=function(t,o,e){var a=o/t;return e&&t%2==0?(8==t&&(a+=.5/t),this._epsilon(Math.cos(2*a*Math.PI))):this._epsilon(Math.cos(2*a*Math.PI-Math.PI/2))},this._circleY=function(t,o,e){var a=o/t;return e&&t%2==0?(8==t&&(a+=.5/t),this._epsilon(Math.sin(2*a*Math.PI))):this._epsilon(Math.sin(2*a*Math.PI-Math.PI/2))},this._regularPolygonShapeFunction=function(t,o,a){a.beginPath();for(var n=parseFloat(t.width)/2,r=parseFloat(t.height)/2,i=parseFloat(t.x)+n,l=parseFloat(t.y)+r,s=[],c=0;c<o;c++){var f=this._circleX(o,c,!0)*n+i,u=this._circleY(o,c,!0)*r+l;s.push({x:f,y:u})}a.moveTo(s[0].x,s[0].y);for(var h=1;h<o;h++)a.lineTo(s[h].x,s[h].y);if(a.closePath(),t.fillColor){var p=e._colorFromInt(t.fillColor,t.fillOpacity);a.fillStyle=p,a.fill()}a.stroke()},this._starShapeFunction=function(t,o,a){a.beginPath();for(var n=parseFloat(t.width)/2,r=parseFloat(t.height)/2,i=parseFloat(t.x)+n,l=parseFloat(t.y)+r,s=2*o,c=[],f=0;f<s;f++)c.push({});for(var u=0;u<o;u++){var h=this._circleX(o,u,!1)*n+i,p=this._circleY(o,u,!1)*r+l,v=this._circleX(o,(u+2)%o,!1)*n+i,y=this._circleY(o,(u+2)%o,!1)*r+l;c[2*u]={x:h,y:p},c[(2*u+4)%s]={x:v,y:y}}for(var F=0;F<s;F+=2){var m=F,d=(F+4)%s,x=(F+2)%s,g=(x+s-4)%s;c[(F+1)%s]=this._findIntersection(c[m],c[d],c[x],c[g])}a.moveTo(c[0].x,c[0].y);for(var C=1;C<s;C++)a.lineTo(c[C].x,c[C].y);if(a.closePath(),t.fillColor){var _=e._colorFromInt(t.fillColor,t.fillOpacity);a.fillStyle=_,a.fill()}a.stroke()},this._scaleCustomPoint=function(t,o,e,a){return a*(o+t)/(e-o)},this._quadraticCurveBoundingBox=function(t,o,e,a,n,r){var i,l,s,c,f,u,h,p;h=t,p=o,((s=(l=e-t)/(i=n-t))<0||s>1)&&(h=l*l/(2*l-i)+t),((u=(f=a-o)/(c=r-o))<0||u>1)&&(p=f*f/(2*f-c)+o);var v={};return v.left=Math.min(t,n,h),v.top=Math.min(o,r,p),v.right=Math.max(t,n,h),v.bottom=Math.max(o,r,p),v.width=v.right-v.left,v.height=v.bottom-v.top,v},this._evalBez=function(t,o,e,a,n){return t*(1-n)*(1-n)*(1-n)+3*o*n*(1-n)*(1-n)+3*e*n*n*(1-n)+a*n*n*n},this._bezierCurveBoundingBox=function(t,o,a,n,r,i,l,s){var c=3*l-9*r+9*a-3*t,f=6*t-12*a+6*r,u=3*a-3*t,h=f*f-4*c*u,p=t,v=t;if(l<p&&(p=l),l>v&&(v=l),h>=0){var y=(-f+Math.sqrt(h))/(2*c);if(y>0&&y<1){var F=e._evalBez(t,a,r,l,y);F<p&&(p=F),F>v&&(v=F)}var m=(-f-Math.sqrt(h))/(2*c);if(m>0&&m<1){var d=e._evalBez(t,a,r,l,m);d<p&&(p=d),d>v&&(v=d)}}var x=o,g=o;if(s<x&&(x=s),s>g&&(g=s),(h=(f=6*o-12*n+6*i)*f-4*(c=3*s-9*i+9*n-3*o)*(u=3*n-3*o))>=0){var C=(-f+Math.sqrt(h))/(2*c);if(C>0&&C<1){var _=e._evalBez(o,n,i,s,C);_<x&&(x=_),_>g&&(g=_)}var M=(-f-Math.sqrt(h))/(2*c);if(M>0&&M<1){var T=e._evalBez(o,n,i,s,M);T<x&&(x=T),T>g&&(g=T)}}var b={};return b.left=p,b.top=x,b.right=v,b.bottom=g,b.width=b.right-b.left,b.height=b.bottom-b.top,b},this._shapeFunctions={RECTANGLE:function(t,o){if(o.beginPath(),o.rect(t.x,t.y,t.width,t.height),o.closePath(),t.fillColor){var a=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=a,o.fill()}o.stroke()},ROUNDEDRECTANGLE:function(t,o){var a=parseFloat(t.width),n=parseFloat(t.height),r=.1*a,i=parseFloat(t.x),l=parseFloat(t.y);if(o.beginPath(),o.moveTo(i+r,l),o.lineTo(i+a-r,l),o.quadraticCurveTo(i+a,l,i+a,l+r),o.lineTo(i+a,l+n-r),o.quadraticCurveTo(i+a,l+n,i+a-r,l+n),o.lineTo(i+r,l+n),o.quadraticCurveTo(i,l+n,i,l+n-r),o.lineTo(i,l+r),o.quadraticCurveTo(i,l,i+r,l),o.closePath(),t.fillColor){var s=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=s,o.fill()}o.stroke()},ELLIPSE:function(t,o){var a=parseFloat(t.width)/2,n=parseFloat(t.height)/2,r=parseFloat(t.x)+a,i=parseFloat(t.y)+n;if(o.beginPath(),o.ellipse(r,i,a,n,0,0,2*Math.PI),o.closePath(),t.fillColor){var l=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=l,o.fill()}o.stroke()},STAR5:function(t,o){e._starShapeFunction(t,5,o)},STAR6:function(t,o){e._starShapeFunction(t,6,o)},TRIANGLE:function(t,o){e._regularPolygonShapeFunction(t,3,o)},PENTAGON:function(t,o){e._regularPolygonShapeFunction(t,5,o)},HEXAGON:function(t,o){e._regularPolygonShapeFunction(t,6,o)},OCTAGON:function(t,o){e._regularPolygonShapeFunction(t,8,o)},PARALLELOGRAM:function(t,o){var a=parseFloat(t.x),n=parseFloat(t.y),r=a+parseFloat(t.width),i=n+parseFloat(t.height);if(o.beginPath(),o.moveTo(a,n),o.lineTo((2*r+a)/3,n),o.lineTo(r,i),o.lineTo((2*a+r)/3,i),o.closePath(),t.fillColor){var l=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=l,o.fill()}},CUSTOM:function(t,o){for(var a=parseFloat(t.x),n=parseFloat(t.y),r=parseFloat(t.width),i=parseFloat(t.height),l=t.customShape.split(" "),s=Number.MAX_VALUE,c=Number.MAX_VALUE,f=Number.MIN_VALUE,u=Number.MIN_VALUE,h=void 0,p=void 0,v=0;v<l.length;v++)if("M"==l[v]){var y=parseFloat(l[v+1]),F=parseFloat(l[v+2]);s=Math.min(s,y),c=Math.min(c,F),f=Math.max(f,y),u=Math.max(u,F),h=y,p=F,v+=2}else if("L"==l[v]){var m=parseFloat(l[v+1]),d=parseFloat(l[v+2]);s=Math.min(s,m),c=Math.min(c,d),f=Math.max(f,m),u=Math.max(u,d),h=m,p=d,v+=2}else if("Q"==l[v]){var x=parseFloat(l[v+1]),g=parseFloat(l[v+2]),C=parseFloat(l[v+3]),_=parseFloat(l[v+4]),M=e._quadraticCurveBoundingBox(h,p,x,g,C,_);s=Math.min(s,M.left),s=Math.min(s,M.right),c=Math.min(c,M.bottom),c=Math.min(c,M.top),f=Math.max(f,M.left),f=Math.max(f,M.right),u=Math.max(u,M.bottom),u=Math.max(u,M.top),h=C,p=_,v+=4}else if("C"==l[v]){var T=parseFloat(l[v+1]),b=parseFloat(l[v+2]),A=parseFloat(l[v+3]),P=parseFloat(l[v+4]),S=parseFloat(l[v+5]),w=parseFloat(l[v+6]),I=e._bezierCurveBoundingBox(h,p,T,b,A,P,S,w);s=Math.min(s,I.left),s=Math.min(s,I.right),c=Math.min(c,I.bottom),c=Math.min(c,I.top),f=Math.max(f,I.left),f=Math.max(f,I.right),u=Math.max(u,I.bottom),u=Math.max(u,I.top),h=S,p=w,v+=6}var O=r/(f-s),E=i/(u-c),N=a-O*s,z=n-E*c;o.beginPath();for(var k=0;k<l.length;k++)if("NZ"==l[k])o.closePath(),o.beginPath(),o.mozFillRule="nonzero";else if("EO"==l[k])o.closePath(),o.beginPath(),o.mozFillRule="evenodd";else if("M"==l[k]){var B=N+O*parseFloat(l[k+1]),L=z+E*parseFloat(l[k+2]);o.moveTo(B,L),k+=2}else if("L"==l[k]){var j=N+O*parseFloat(l[k+1]),X=z+E*parseFloat(l[k+2]);o.lineTo(j,X),k+=2}else if("Q"==l[k]){var q=N+O*parseFloat(l[k+1]),R=z+E*parseFloat(l[k+2]),G=N+O*parseFloat(l[k+3]),U=z+E*parseFloat(l[k+4]);o.quadraticCurveTo(q,R,G,U),k+=4}else if("C"==l[k]){var Y=N+O*parseFloat(l[k+1]),V=z+E*parseFloat(l[k+2]),K=N+O*parseFloat(l[k+3]),D=z+E*parseFloat(l[k+4]),J=N+O*parseFloat(l[k+5]),Q=z+E*parseFloat(l[k+6]);o.bezierCurveTo(Y,V,K,D,J,Q),k+=6}else l[k];if(o.closePath(),t.fillColor){var H=e._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=H,o.fill()}o.stroke()}},this._colorFromInt=function(t,o){return"rgb("+((16711680&(t>>>=0))>>>16)+","+((65280&t)>>>8)+","+(255&t)+","+parseFloat(o)/100+")"}}return a(t,[{key:"drawBackgroundFromNiceCX",value:function(t,o){var e=this.cx2js.cyBackgroundColorFromNiceCX(o);this.drawBackground(t,e)}},{key:"drawBackground",value:function(t,o){var e=t.cyCanvas({zIndex:-2}).getCanvas(),a=e.getContext("2d");t.on("render cyCanvas.resize",function(t){a.fillStyle=o,a.fillRect(0,0,e.width,e.height)})}},{key:"getAnnotationElementsFromNiceCX",value:function(t){return t.networkAttributes?t.networkAttributes.elements.filter(function(t){return"__Annotations"==t.n}):[]}},{key:"drawAnnotationsFromAnnotationElements",value:function(t,o){var e=this,a=this.cx2js,n=t.cyCanvas({zIndex:-1}),r=t.cyCanvas({zIndex:1}),i=n.getCanvas().getContext("2d"),l=r.getCanvas().getContext("2d");t.on("render cyCanvas.resize",function(t){var s=e._colorFromInt,c=e._shapeFunctions;n.resetTransform(i),n.clear(i),n.setTransform(i),i.save(),r.resetTransform(l),r.clear(l),r.setTransform(l),l.save();var f={},u=[],h=[];o.forEach(function(t){t.v.forEach(function(t){var o=t.split("|"),e={};o.forEach(function(t){var o=t.split("=");e[o[0]]=o[1]}),f[e.uuid]=e,"foreground"==e.canvas?u.push(e.uuid):h.push(e.uuid)})});var p=function(t,o){var e=f[t],a=f[o];return parseInt(a.z)-parseInt(e.z)};u.sort(p),h.sort(p),[{context:l,annotations:u},{context:i,annotations:h}].forEach(function(t){var o=t.context;t.annotations.forEach(function(t){var e,n,r,i=f[t];if("org.cytoscape.view.presentation.annotations.ShapeAnnotation"==i.type||"org.cytoscape.view.presentation.annotations.BoundedTextAnnotation"==i.type)o.lineWidth=i.edgeThickness,i.width=parseFloat(i.width)/parseFloat(i.zoom),i.height=parseFloat(i.height)/parseFloat(i.zoom),c[i.shapeType]?(o.strokeStyle=s(i.edgeColor,i.edgeOpacity),c[i.shapeType](i,o)):console.warn("Invalid shape type: "+i.shapeType);else if("org.cytoscape.view.presentation.annotations.ArrowAnnotation"==i.type&&i.targetAnnotation&&i.sourceAnnotation){f[i.sourceAnnotation],f[i.targetAnnotation];o.stroke()}if("org.cytoscape.view.presentation.annotations.TextAnnotation"==i.type?(e=i.text,o.textBaseline="top",o.textAlign="left",n=i.x,r=i.y):"org.cytoscape.view.presentation.annotations.BoundedTextAnnotation"==i.type&&(e=i.text,o.textBaseline="middle",o.textAlign="center",n=parseFloat(i.x)+i.width/2,r=parseFloat(i.y)+i.height/2),e&&n&&r){var l,u=parseFloat(i.fontSize)/parseFloat(i.zoom);if(i.fontFamily&&(l=a.JavaLogicalFontConstants.FONT_FAMILY_LIST.includes(i.fontFamily)?a.JavaLogicalFontConstants.FONT_STACK_MAP[i.fontFamily]:a.CommonOSFontConstants.FONT_STACK_MAP[i.fontFamily]?a.CommonOSFontConstants.FONT_STACK_MAP[i.fontFamily]:"sans-serif"),o.font=u+"px "+l,i.color){var h=s(i.color,"100");o.fillStyle=h}o.fillText(e.toString(),n,r)}})}),l.restore(),i.restore()})}},{key:"drawAnnotationsFromNiceCX",value:function(t,o){var e=this.getAnnotationElementsFromNiceCX(o);this.drawAnnotationsFromAnnotationElements(t,e)}}]),t}();t.exports={CxToCyCanvas:n}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,