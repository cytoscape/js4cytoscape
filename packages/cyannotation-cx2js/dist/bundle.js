!function(t,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports["@js4Cytoscape/cyannotationCx2Js"]=o():t["@js4Cytoscape/cyannotationCx2Js"]=o()}(self,(function(){return t={500:function(t){function o(t,o){for(var a=0;a<o.length;a++){var e=o[a];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(t,e.key,e)}}var a=function(){function t(o){!function(t,o){if(!(t instanceof o))throw new TypeError("Cannot call a class as a function")}(this,t);var a=this;a.cx2js=o,this._findIntersection=function(t,o,a,e){var n=(e.y-a.y)*(o.x-t.x)-(e.x-a.x)*(o.y-t.y),r=((e.x-a.x)*(t.y-a.y)-(e.y-a.y)*(t.x-a.x))/n;return{x:this._epsilon(t.x+r*(o.x-t.x)),y:this._epsilon(t.y+r*(o.y-t.y))}},this._epsilon=function(t){return Math.abs(t)<1e-10?0:t},this._circleX=function(t,o,a){var e=o/t;return a&&t%2==0?(8==t&&(e+=.5/t),this._epsilon(Math.cos(2*e*Math.PI))):this._epsilon(Math.cos(2*e*Math.PI-Math.PI/2))},this._circleY=function(t,o,a){var e=o/t;return a&&t%2==0?(8==t&&(e+=.5/t),this._epsilon(Math.sin(2*e*Math.PI))):this._epsilon(Math.sin(2*e*Math.PI-Math.PI/2))},this._regularPolygonShapeFunction=function(t,o,e){e.beginPath();for(var n=parseFloat(t.width)/2,r=parseFloat(t.height)/2,i=parseFloat(t.x)+n,l=parseFloat(t.y)+r,s=[],c=0;c<o;c++){var h=this._circleX(o,c,!0)*n+i,f=this._circleY(o,c,!0)*r+l;s.push({x:h,y:f})}e.moveTo(s[0].x,s[0].y);for(var p=1;p<o;p++)e.lineTo(s[p].x,s[p].y);if(e.closePath(),t.fillColor){var u=a._colorFromInt(t.fillColor,t.fillOpacity);e.fillStyle=u,e.fill()}e.stroke()},this._starShapeFunction=function(t,o,e){e.beginPath();for(var n=parseFloat(t.width)/2,r=parseFloat(t.height)/2,i=parseFloat(t.x)+n,l=parseFloat(t.y)+r,s=2*o,c=[],h=0;h<s;h++)c.push({});for(var f=0;f<o;f++){var p=this._circleX(o,f,!1)*n+i,u=this._circleY(o,f,!1)*r+l,v=this._circleX(o,(f+2)%o,!1)*n+i,F=this._circleY(o,(f+2)%o,!1)*r+l;c[2*f]={x:p,y:u},c[(2*f+4)%s]={x:v,y:F}}for(var y=0;y<s;y+=2){var m=y,x=(y+4)%s,g=(y+2)%s,C=(g+s-4)%s;c[(y+1)%s]=this._findIntersection(c[m],c[x],c[g],c[C])}e.moveTo(c[0].x,c[0].y);for(var d=1;d<s;d++)e.lineTo(c[d].x,c[d].y);if(e.closePath(),t.fillColor){var _=a._colorFromInt(t.fillColor,t.fillOpacity);e.fillStyle=_,e.fill()}e.stroke()},this._scaleCustomPoint=function(t,o,a,e){return e*(o+t)/(a-o)},this._quadraticCurveBoundingBox=function(t,o,a,e,n,r){var i,l,s,c,h,f,p,u;p=t,u=o,((s=(l=a-t)/(i=n-t))<0||s>1)&&(p=l*l/(2*l-i)+t),((f=(h=e-o)/(c=r-o))<0||f>1)&&(u=h*h/(2*h-c)+o);var v={};return v.left=Math.min(t,n,p),v.top=Math.min(o,r,u),v.right=Math.max(t,n,p),v.bottom=Math.max(o,r,u),v.width=v.right-v.left,v.height=v.bottom-v.top,v},this._evalBez=function(t,o,a,e,n){return t*(1-n)*(1-n)*(1-n)+3*o*n*(1-n)*(1-n)+3*a*n*n*(1-n)+e*n*n*n},this._bezierCurveBoundingBox=function(t,o,e,n,r,i,l,s){var c=3*l-9*r+9*e-3*t,h=6*t-12*e+6*r,f=3*e-3*t,p=h*h-4*c*f,u=t,v=t;if(l<u&&(u=l),l>v&&(v=l),p>=0){var F=(-h+Math.sqrt(p))/(2*c);if(F>0&&F<1){var y=a._evalBez(t,e,r,l,F);y<u&&(u=y),y>v&&(v=y)}var m=(-h-Math.sqrt(p))/(2*c);if(m>0&&m<1){var x=a._evalBez(t,e,r,l,m);x<u&&(u=x),x>v&&(v=x)}}var g=o,C=o;if(s<g&&(g=s),s>C&&(C=s),(p=(h=6*o-12*n+6*i)*h-4*(c=3*s-9*i+9*n-3*o)*(f=3*n-3*o))>=0){var d=(-h+Math.sqrt(p))/(2*c);if(d>0&&d<1){var _=a._evalBez(o,n,i,s,d);_<g&&(g=_),_>C&&(C=_)}var M=(-h-Math.sqrt(p))/(2*c);if(M>0&&M<1){var T=a._evalBez(o,n,i,s,M);T<g&&(g=T),T>C&&(C=T)}}var A={};return A.left=u,A.top=g,A.right=v,A.bottom=C,A.width=A.right-A.left,A.height=A.bottom-A.top,A},this._shapeFunctions={RECTANGLE:function(t,o){if(o.beginPath(),o.rect(t.x,t.y,t.width,t.height),o.closePath(),t.fillColor){var e=a._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=e,o.fill()}o.stroke()},ROUNDEDRECTANGLE:function(t,o){var e=parseFloat(t.width),n=parseFloat(t.height),r=.1*e,i=parseFloat(t.x),l=parseFloat(t.y);if(o.beginPath(),o.moveTo(i+r,l),o.lineTo(i+e-r,l),o.quadraticCurveTo(i+e,l,i+e,l+r),o.lineTo(i+e,l+n-r),o.quadraticCurveTo(i+e,l+n,i+e-r,l+n),o.lineTo(i+r,l+n),o.quadraticCurveTo(i,l+n,i,l+n-r),o.lineTo(i,l+r),o.quadraticCurveTo(i,l,i+r,l),o.closePath(),t.fillColor){var s=a._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=s,o.fill()}o.stroke()},ELLIPSE:function(t,o){var e=parseFloat(t.width)/2,n=parseFloat(t.height)/2,r=parseFloat(t.x)+e,i=parseFloat(t.y)+n;if(o.beginPath(),o.ellipse(r,i,e,n,0,0,2*Math.PI),o.closePath(),t.fillColor){var l=a._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=l,o.fill()}o.stroke()},STAR5:function(t,o){a._starShapeFunction(t,5,o)},STAR6:function(t,o){a._starShapeFunction(t,6,o)},TRIANGLE:function(t,o){a._regularPolygonShapeFunction(t,3,o)},PENTAGON:function(t,o){a._regularPolygonShapeFunction(t,5,o)},HEXAGON:function(t,o){a._regularPolygonShapeFunction(t,6,o)},OCTAGON:function(t,o){a._regularPolygonShapeFunction(t,8,o)},PARALLELOGRAM:function(t,o){var e=parseFloat(t.x),n=parseFloat(t.y),r=e+parseFloat(t.width),i=n+parseFloat(t.height);if(o.beginPath(),o.moveTo(e,n),o.lineTo((2*r+e)/3,n),o.lineTo(r,i),o.lineTo((2*e+r)/3,i),o.closePath(),t.fillColor){var l=a._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=l,o.fill()}},CUSTOM:function(t,o){for(var e,n,r=parseFloat(t.x),i=parseFloat(t.y),l=parseFloat(t.width),s=parseFloat(t.height),c=t.customShape.split(" "),h=Number.MAX_VALUE,f=Number.MAX_VALUE,p=Number.MIN_VALUE,u=Number.MIN_VALUE,v=0;v<c.length;v++)if("M"==c[v]){var F=parseFloat(c[v+1]),y=parseFloat(c[v+2]);h=Math.min(h,F),f=Math.min(f,y),p=Math.max(p,F),u=Math.max(u,y),e=F,n=y,v+=2}else if("L"==c[v]){var m=parseFloat(c[v+1]),x=parseFloat(c[v+2]);h=Math.min(h,m),f=Math.min(f,x),p=Math.max(p,m),u=Math.max(u,x),e=m,n=x,v+=2}else if("Q"==c[v]){var g=parseFloat(c[v+1]),C=parseFloat(c[v+2]),d=parseFloat(c[v+3]),_=parseFloat(c[v+4]),M=a._quadraticCurveBoundingBox(e,n,g,C,d,_);h=Math.min(h,M.left),h=Math.min(h,M.right),f=Math.min(f,M.bottom),f=Math.min(f,M.top),p=Math.max(p,M.left),p=Math.max(p,M.right),u=Math.max(u,M.bottom),u=Math.max(u,M.top),e=d,n=_,v+=4}else if("C"==c[v]){var T=parseFloat(c[v+1]),A=parseFloat(c[v+2]),P=parseFloat(c[v+3]),b=parseFloat(c[v+4]),S=parseFloat(c[v+5]),w=parseFloat(c[v+6]),I=a._bezierCurveBoundingBox(e,n,T,A,P,b,S,w);h=Math.min(h,I.left),h=Math.min(h,I.right),f=Math.min(f,I.bottom),f=Math.min(f,I.top),p=Math.max(p,I.left),p=Math.max(p,I.right),u=Math.max(u,I.bottom),u=Math.max(u,I.top),e=S,n=w,v+=6}var E=l/(p-h),N=s/(u-f),O=r-E*h,z=i-N*f;o.beginPath();for(var k=0;k<c.length;k++)if("NZ"==c[k])o.closePath(),o.beginPath(),o.mozFillRule="nonzero";else if("EO"==c[k])o.closePath(),o.beginPath(),o.mozFillRule="evenodd";else if("M"==c[k]){var B=O+E*parseFloat(c[k+1]),L=z+N*parseFloat(c[k+2]);o.moveTo(B,L),k+=2}else if("L"==c[k]){var X=O+E*parseFloat(c[k+1]),q=z+N*parseFloat(c[k+2]);o.lineTo(X,q),k+=2}else if("Q"==c[k]){var R=O+E*parseFloat(c[k+1]),j=z+N*parseFloat(c[k+2]),G=O+E*parseFloat(c[k+3]),U=z+N*parseFloat(c[k+4]);o.quadraticCurveTo(R,j,G,U),k+=4}else if("C"==c[k]){var Y=O+E*parseFloat(c[k+1]),J=z+N*parseFloat(c[k+2]),V=O+E*parseFloat(c[k+3]),K=z+N*parseFloat(c[k+4]),D=O+E*parseFloat(c[k+5]),Q=z+N*parseFloat(c[k+6]);o.bezierCurveTo(Y,J,V,K,D,Q),k+=6}else c[k];if(o.closePath(),t.fillColor){var H=a._colorFromInt(t.fillColor,t.fillOpacity);o.fillStyle=H,o.fill()}o.stroke()}},this._colorFromInt=function(t,o){return"rgb("+((16711680&(t>>>=0))>>>16)+","+((65280&t)>>>8)+","+(255&t)+","+parseFloat(o)/100+")"}}var a,e,n;return a=t,(e=[{key:"drawBackgroundFromNiceCX",value:function(t,o){var a=this.cx2js.cyBackgroundColorFromNiceCX(o);this.drawBackground(t,a)}},{key:"drawBackground",value:function(t,o){var a=t.cyCanvas({zIndex:-2}).getCanvas(),e=a.getContext("2d");t.on("render cyCanvas.resize",(function(t){e.fillStyle=o,e.fillRect(0,0,a.width,a.height)}))}},{key:"getAnnotationElementsFromNiceCX",value:function(t){return t.networkAttributes?t.networkAttributes.elements.filter((function(t){return"__Annotations"==t.n})):[]}},{key:"drawAnnotationsFromAnnotationElements",value:function(t,o){var a=this,e=this.cx2js,n=t.cyCanvas({zIndex:-1}),r=t.cyCanvas({zIndex:1}),i=n.getCanvas().getContext("2d"),l=r.getCanvas().getContext("2d");t.on("render cyCanvas.resize",(function(t){var s=a._colorFromInt,c=a._shapeFunctions;n.resetTransform(i),n.clear(i),n.setTransform(i),i.save(),r.resetTransform(l),r.clear(l),r.setTransform(l),l.save();var h={},f=[],p=[];o.forEach((function(t){t.v.forEach((function(t){var o=t.split("|"),a={};o.forEach((function(t){var o=t.split("=");a[o[0]]=o[1]})),h[a.uuid]=a,"foreground"==a.canvas?f.push(a.uuid):p.push(a.uuid)}))}));var u=function(t,o){var a=h[t],e=h[o];return parseInt(e.z)-parseInt(a.z)};f.sort(u),p.sort(u),[{context:l,annotations:f},{context:i,annotations:p}].forEach((function(t){var o=t.context;t.annotations.forEach((function(t){var a,n,r,i=h[t];if("org.cytoscape.view.presentation.annotations.ShapeAnnotation"==i.type||"org.cytoscape.view.presentation.annotations.BoundedTextAnnotation"==i.type?(o.lineWidth=i.edgeThickness,i.width=parseFloat(i.width)/parseFloat(i.zoom),i.height=parseFloat(i.height)/parseFloat(i.zoom),c[i.shapeType]&&(o.strokeStyle=s(i.edgeColor,i.edgeOpacity),c[i.shapeType](i,o))):"org.cytoscape.view.presentation.annotations.ArrowAnnotation"==i.type&&i.targetAnnotation&&i.sourceAnnotation&&(h[i.sourceAnnotation],h[i.targetAnnotation],o.stroke()),"org.cytoscape.view.presentation.annotations.TextAnnotation"==i.type?(a=i.text,o.textBaseline="top",o.textAlign="left",n=i.x,r=i.y):"org.cytoscape.view.presentation.annotations.BoundedTextAnnotation"==i.type&&(a=i.text,o.textBaseline="middle",o.textAlign="center",n=parseFloat(i.x)+i.width/2,r=parseFloat(i.y)+i.height/2),a&&n&&r){var l,f=i.zoom?parseFloat(i.zoom):1,p=parseFloat(i.fontSize)/f;if(i.fontFamily&&(l=e.JavaLogicalFontConstants.FONT_FAMILY_LIST.includes(i.fontFamily)?e.JavaLogicalFontConstants.FONT_STACK_MAP[i.fontFamily]:e.CommonOSFontConstants.FONT_STACK_MAP[i.fontFamily]?e.CommonOSFontConstants.FONT_STACK_MAP[i.fontFamily]:"sans-serif"),o.font=p+"px "+l,i.color){var u=s(i.color,"100");o.fillStyle=u}o.fillText(a.toString(),n,r)}}))})),l.restore(),i.restore()}))}},{key:"drawAnnotationsFromNiceCX",value:function(t,o){var a=this.getAnnotationElementsFromNiceCX(o);this.drawAnnotationsFromAnnotationElements(t,a)}}])&&o(a.prototype,e),n&&o(a,n),Object.defineProperty(a,"prototype",{writable:!1}),t}();t.exports={CxToCyCanvas:a}},759:function(t,o,a){"use strict";var e=a(500).CxToCyCanvas;t.exports={CxToCyCanvas:e}}},o={},a=function a(e){var n=o[e];if(void 0!==n)return n.exports;var r=o[e]={exports:{}};return t[e](r,r.exports,a),r.exports}(759),a;var t,o,a}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,