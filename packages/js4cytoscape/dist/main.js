async function cyrestGET(t="",e="",a=defaultBaseUrl){let n=a.concat("/",t);if(""!=e){const t=e;n=n.concat("?",t)}const o=await fetch(n,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});return await o.json()}async function cyrestDELETE(t="",e="",a=defaultBaseUrl){let n=a.concat("/",t);if(""!=e){const t=e;n=n.concat("?",t)}const o=await fetch(n,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});return await o.text()}async function cyrestPOST(t="",e="",a={},n=defaultBaseUrl){let o=n.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const c=JSON.stringify(a),s=await fetch(o,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});return await s.json()}async function cyrestPUT(t="",e="",a={},n=defaultBaseUrl){let o=n.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const c=JSON.stringify(a),s=await fetch(o,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});return await s.json()}async function commandsGET(t,e=defaultBaseUrl){const a=command2getQuery(t,e),n=await fetch(a,{method:"GET",headers:{Accept:"text/plain","Content-Type":"text/plain"}});return await n.text()}async function commandsRun(t,e=defaultBaseUrl){commandsGET(t,e=e)}async function commandsPOST(t,e=defaultBaseUrl){const a=command2PostQueryUrl(t,e);let n=command2PostQueryBody(t);n=JSON.stringify(n);const o=await fetch(a,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:n});return await o.text()}function command2getQuery(t,e=defaultBaseUrl){let a=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX"),n=a[0].replace(" ","/"),o=e.concat("/commands/"),c=encodeURI(o.concat(n)),s=a.slice(1).join(" "),l="",r=[],i=[];if(void 0!==s&&0!=s.length){const t=/[A-Za-z0-9_-]+=/g;r=(r=(s=s.replace(/['"]+/g,"")).match(t)).map(function(t){return t.replace(/=/g,"")});const e=/\ *[A-Za-z0-9_-]+=/g;i=s.split(e).slice(1),l=r[0]+"="+encodeURI(i[0]);for(var p=1;p<r.length;p++){l=l+"&"+(r[p]+"="+encodeURI(i[p]))}return c+"?"+l}return c}function command2PostQueryUrl(t,e=defaultBaseUrl){let a=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX")[0].replace(" ","/"),n=e.concat("/commands/");return encodeURI(n.concat(a))}function command2PostQueryBody(t){let e=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX").slice(1).join(" "),a={},n=[],o=[];if(void 0!==e&&0!=e.length){const t=/[A-Za-z0-9_-]+=/g;n=(n=(e=e.replace(/['"]+/g,"")).match(t)).map(function(t){return t.replace(/=/g,"")});const c=/\ *[A-Za-z0-9_-]+=/g;return o=e.split(c).slice(1),n.forEach((t,e)=>a[t]=o[e]),a}return a={atLeastOneArg:"required"}}async function deleteAllNetworks(t=defaultBaseUrl){cyrestDELETE("networks",t=t);console.log("All networks are deleted.")}async function getNetworkSuid(t="current",e=defaultBaseUrl){commandsPOST('network get attribute network="'+t+'" namespace="default" columnList="SUID"',e=e).then(t=>{console.log("Suid: "+JSON.parse(t).data[0].SUID)})}async function cytoscapeVersionInfo(t=defaultBaseUrl){let e=cyrestGET("version",t=t);e.then(t=>{console.log("apiVersion: "+t.apiVersion)}),e.then(t=>{console.log("cytoscapeVersion: "+t.cytoscapeVersion)})}async function cytoscapeMemoryStatus(t=defaultBaseUrl){cyrestGET("","",t=t).then(t=>{console.log(t.memoryStatus)})}const defaultBaseUrl="http://127.0.0.1:1234/v1";async function getAvailableApps(t=defaultBaseUrl){commandsGET("apps list available",t=t).then(t=>{console.log("Available apps: "+t)})}async function getInstalledApps(t=defaultBaseUrl){commandsGET("apps list installed",t=t).then(t=>{console.log("Installed apps: "+t)})}async function getDisabledApps(t=defaultBaseUrl){commandsGET("apps list disabled",t=t).then(t=>{console.log("Disabled apps: "+t)})}async function getAppUpdates(t=defaultBaseUrl){commandsGET("apps list updates",t=t)}async function openAppStore(t,e=defaultBaseUrl){commandsGET("apps open appstore app='"+t+"'",e=e)}async function getFilterList(t=defaultBaseUrl){commandsPOST("filter list",t=t).then(t=>{console.log("Filter list: "+JSON.stringify(JSON.parse(t).data))})}async function analyzeNetwork(t=!1,e=defaultBaseUrl){commandsPOST("analyzer analyze directed="+t,e=e).then(t=>{console.log("Analyze network: "+JSON.stringify(JSON.parse(t).data))})}