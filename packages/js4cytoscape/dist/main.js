async function cyrestGET(t="",e="",n=defaultBaseUrl){let o=n.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const a=await fetch(o,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});return await a.json()}async function cyrestDELETE(t="",e="",n=defaultBaseUrl){let o=n.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const a=await fetch(o,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});return await a.text()}async function cyrestPOST(t="",e="",n={},o=defaultBaseUrl){let a=o.concat("/",t);if(""!=e){const t=e;a=a.concat("?",t)}const c=JSON.stringify(n),s=await fetch(a,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});return await s.json()}async function cyrestPUT(t="",e="",n={},o=defaultBaseUrl){let a=o.concat("/",t);if(""!=e){const t=e;a=a.concat("?",t)}const c=JSON.stringify(n),s=await fetch(a,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:c});return await s.json()}async function commandsGET(t,e=defaultBaseUrl){const n=command2getQuery(t,e),o=await fetch(n,{method:"GET",headers:{Accept:"text/plain","Content-Type":"text/plain"}});return await o.text()}async function commandsRun(t,e=defaultBaseUrl){commandsGET(t,e=e)}async function commandsPOST(t,e=defaultBaseUrl){const n=command2PostQueryUrl(t,e);let o=command2PostQueryBody(t);o=JSON.stringify(o);const a=await fetch(n,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:o});return await a.text()}function command2getQuery(t,e=defaultBaseUrl){let n=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX"),o=n[0].replace(" ","/"),a=e.concat("/commands/"),c=encodeURI(a.concat(o)),s=n.slice(1).join(" "),l="",i=[],r=[];if(void 0!==s&&0!=s.length){const t=/[A-Za-z0-9_-]+=/g;i=(i=(s=s.replace(/['"]+/g,"")).match(t)).map(function(t){return t.replace(/=/g,"")});const e=/\ *[A-Za-z0-9_-]+=/g;r=s.split(e).slice(1),l=i[0]+"="+encodeURI(r[0]);for(var d=1;d<i.length;d++){l=l+"&"+(i[d]+"="+encodeURI(r[d]))}return c+"?"+l}return c}function command2PostQueryUrl(t,e=defaultBaseUrl){let n=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX")[0].replace(" ","/"),o=e.concat("/commands/");return encodeURI(o.concat(n))}function command2PostQueryBody(t){let e=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX").slice(1).join(" "),n={},o=[],a=[];if(void 0!==e&&0!=e.length){const t=/[A-Za-z0-9_-]+=/g;o=(o=(e=e.replace(/['"]+/g,"")).match(t)).map(function(t){return t.replace(/=/g,"")});const c=/\ *[A-Za-z0-9_-]+=/g;return a=e.split(c).slice(1),o.forEach((t,e)=>n[t]=a[e]),n}return n={atLeastOneArg:"required"}}async function deleteAllNetworks(t=defaultBaseUrl){cyrestDELETE("networks",t=t);console.log("All networks are deleted.")}async function getNetworkSuid(t="current",e=defaultBaseUrl){return commandsPOST('network get attribute network="'+t+'" namespace="default" columnList="SUID"',e=e).then(t=>JSON.parse(t).data[0].SUID)}async function cytoscapeVersionInfo(t=defaultBaseUrl){let e=cyrestGET("version",t=t);e.then(t=>{console.log("apiVersion: "+t.apiVersion)}),e.then(t=>{console.log("cytoscapeVersion: "+t.cytoscapeVersion)})}async function cytoscapeMemoryStatus(t=defaultBaseUrl){cyrestGET("","",t=t).then(t=>{console.log(t.memoryStatus)})}async function importNetworkFromNDEX(t=t,e,n,o){const a={serverUrl:t,uuid:e,username:n,password:o},c=CYREST_BASE_URL+"/cyndex2/v1/networks";console.log("Calling CyREST POST:",c);const s=await fetch(c,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(a)}),l=await s.json();console.log("Response JSON: "+JSON.stringify(l));const i=l.data.suid;return console.log("network SUID: "+i),i}async function exportNetworkToNDEx(t=t,e,n,o,a="current",c=null){const s={serverUrl:t,username:e,password:n,metadata:c,isPublic:o};let l=await getNetworkSuid(a=a);console.log(l);const i=CYREST_BASE_URL+"/cyndex2/v1/networks/"+l;console.log("Calling CyREST POST:",i);const r=await fetch(i,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(s)}),d=await r.json();console.log("Response JSON: "+JSON.stringify(d));const p=d.data.suid;return console.log("network SUID: "+p),p}const defaultBaseUrl="http://127.0.0.1:1234/v1",serverUrl="https://ndexbio.org/v2",CYREST_BASE_URL="http://127.0.0.1:1234";let ndex,disabledButton;function displayCX(t,e){const n=document.getElementById(e),o=new cytoscapeCx2js.CyNetworkUtils,a=o.rawCXtoNiceCX(t),c=new cytoscapeCx2js.CxToJs(o);let s={};const l=c.cyElementsFromNiceCX(a,s),i=c.cyStyleFromNiceCX(a,s),r=c.cyBackgroundColorFromNiceCX(a),d=c.getDefaultLayout(),p=c.cyZoomFromNiceCX(a),u=c.cyPanFromNiceCX(a);n.style.backgroundColor=r,cytoscape({container:n,style:i,elements:l,layout:d,zoom:p,pan:u}).fit()}function initNdexClient(){ndex=new ndexClient.NDEx(serverUrl)}function displayNDExCX(t,e){initNdexClient(),ndex.getRawNetwork(t).then(t=>{displayCX(t,e)})}function displayLocalCX(t,e){initNdexClient(),fetch(t).then(function(t){return t.json()}).then(t=>{displayCX(t,e)})}async function checkCytoscape(){try{await cyrestGET("version");disabledButton=!1}catch(t){disabledButton=!0}const t=document.getElementById("cytobutton");disabledButton&&(t.disabled="disabled"),disabledButton&&(document.getElementById("cytobutton").innerText="Download Cytoscape"),disabledButton&&document.getElementById("cytobutton").setAttribute("title","Download Cytoscape")}async function getAvailableApps(t=defaultBaseUrl){commandsGET("apps list available",t=t).then(t=>{console.log("Available apps: "+t)})}async function getInstalledApps(t=defaultBaseUrl){commandsGET("apps list installed",t=t).then(t=>{console.log("Installed apps: "+t)})}async function getDisabledApps(t=defaultBaseUrl){commandsGET("apps list disabled",t=t).then(t=>{console.log("Disabled apps: "+t)})}async function getAppUpdates(t=defaultBaseUrl){commandsGET("apps list updates",t=t)}async function openAppStore(t,e=defaultBaseUrl){commandsGET("apps open appstore app='"+t+"'",e=e)}async function getFilterList(t=defaultBaseUrl){commandsPOST("filter list",t=t).then(t=>{console.log("Filter list: "+JSON.stringify(JSON.parse(t).data))})}async function analyzeNetwork(t=!1,e=defaultBaseUrl){commandsPOST("analyzer analyze directed="+t,e=e).then(t=>{console.log("Analyze network: "+JSON.stringify(JSON.parse(t).data))})}