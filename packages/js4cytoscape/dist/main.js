async function cyrestGET(t="",e="",n=defaultBaseUrl){let a=n.concat("/",t);if(""!=e){const t=e;a=a.concat("?",t)}const o=await fetch(a,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}});return await o.json()}async function cyrestDELETE(t="",e="",n=defaultBaseUrl){let a=n.concat("/",t);if(""!=e){const t=e;a=a.concat("?",t)}const o=await fetch(a,{method:"DELETE",headers:{Accept:"application/json","Content-Type":"application/json"}});return await o.text()}async function cyrestPOST(t="",e="",n={},a=defaultBaseUrl){let o=a.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const s=JSON.stringify(n),c=await fetch(o,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:s});return await c.json()}async function cyrestPUT(t="",e="",n={},a=defaultBaseUrl){let o=a.concat("/",t);if(""!=e){const t=e;o=o.concat("?",t)}const s=JSON.stringify(n),c=await fetch(o,{method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:s});return await c.json()}async function commandsGET(t,e=defaultBaseUrl){const n=command2getQuery(t,e),a=await fetch(n,{method:"GET",headers:{Accept:"text/plain","Content-Type":"text/plain"}});return await a.text()}async function commandsRun(t,e=defaultBaseUrl){commandsGET(t,e=e)}async function commandsPOST(t,e=defaultBaseUrl){const n=command2PostQueryUrl(t,e);let a=command2PostQueryBody(t);a=JSON.stringify(a);const o=await fetch(n,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:a});return await o.text()}function command2getQuery(t,e=defaultBaseUrl){let n=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX"),a=n[0].replace(" ","/"),o=e.concat("/commands/"),s=encodeURI(o.concat(a)),c=n.slice(1).join(" "),l="",r=[],i=[];if(void 0!==c&&0!=c.length){const t=/[A-Za-z0-9_-]+=/g;r=(r=(c=c.replace(/['"]+/g,"")).match(t)).map(function(t){return t.replace(/=/g,"")});const e=/\ *[A-Za-z0-9_-]+=/g;i=c.split(e).slice(1),l=r[0]+"="+encodeURI(i[0]);for(var p=1;p<r.length;p++){l=l+"&"+(r[p]+"="+encodeURI(i[p]))}return s+"?"+l}return s}function command2PostQueryUrl(t,e=defaultBaseUrl){let n=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX")[0].replace(" ","/"),a=e.concat("/commands/");return encodeURI(a.concat(n))}function command2PostQueryBody(t){let e=t.replace(/\ [A-Za-z0-9_-]*=/g,"XXXXXX$&").split("XXXXXX").slice(1).join(" "),n={},a=[],o=[];if(void 0!==e&&0!=e.length){const t=/[A-Za-z0-9_-]+=/g;a=(a=(e=e.replace(/['"]+/g,"")).match(t)).map(function(t){return t.replace(/=/g,"")});const s=/\ *[A-Za-z0-9_-]+=/g;return o=e.split(s).slice(1),a.forEach((t,e)=>n[t]=o[e]),n}return n={atLeastOneArg:"required"}}async function deleteAllNetworks(t=defaultBaseUrl){cyrestDELETE("networks",t=t);console.log("All networks are deleted.")}async function getNetworkSuid(t="current",e=defaultBaseUrl){commandsPOST('network get attribute network="'+t+'" namespace="default" columnList="SUID"',e=e).then(t=>{console.log("Suid: "+JSON.parse(t).data[0].SUID)})}async function cytoscapeVersionInfo(t=defaultBaseUrl){let e=cyrestGET("version",t=t);e.then(t=>{console.log("apiVersion: "+t.apiVersion)}),e.then(t=>{console.log("cytoscapeVersion: "+t.cytoscapeVersion)})}async function cytoscapeMemoryStatus(t=defaultBaseUrl){cyrestGET("","",t=t).then(t=>{console.log(t.memoryStatus)})}async function importNetworkFromNDEX(t=t,e,n,a){const o={serverUrl:t,uuid:e,username:n,password:a},s=CYREST_BASE_URL+"/cyndex2/v1/networks";console.log("Calling CyREST POST:",s);const c=await fetch(s,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(o)}),l=await c.json();console.log("Response JSON: "+JSON.stringify(l));const r=l.data.suid;return console.log("network SUID: "+r),r}async function exportNetworkToNDEx(t=t,e,n,a,o="current",s=null){const c={serverUrl:t,username:e,password:n,metadata:s,isPublic:a};let l=getNetworkSuid(o=o);const r=CYREST_BASE_URL+"/cyndex2/v1/networks/"+l;console.log("Calling CyREST POST:",r);const i=await fetch(r,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(c)}),p=await i.json();console.log("Response JSON: "+JSON.stringify(p));const d=p.data.suid;return console.log("network SUID: "+d),d}const defaultBaseUrl="http://127.0.0.1:1234/v1",serverUrl="http://ndexbio.org/v2",CYREST_BASE_URL="http://127.0.0.1:1234";async function getAvailableApps(t=defaultBaseUrl){commandsGET("apps list available",t=t).then(t=>{console.log("Available apps: "+t)})}async function getInstalledApps(t=defaultBaseUrl){commandsGET("apps list installed",t=t).then(t=>{console.log("Installed apps: "+t)})}async function getDisabledApps(t=defaultBaseUrl){commandsGET("apps list disabled",t=t).then(t=>{console.log("Disabled apps: "+t)})}async function getAppUpdates(t=defaultBaseUrl){commandsGET("apps list updates",t=t)}async function openAppStore(t,e=defaultBaseUrl){commandsGET("apps open appstore app='"+t+"'",e=e)}async function getFilterList(t=defaultBaseUrl){commandsPOST("filter list",t=t).then(t=>{console.log("Filter list: "+JSON.stringify(JSON.parse(t).data))})}async function analyzeNetwork(t=!1,e=defaultBaseUrl){commandsPOST("analyzer analyze directed="+t,e=e).then(t=>{console.log("Analyze network: "+JSON.stringify(JSON.parse(t).data))})}